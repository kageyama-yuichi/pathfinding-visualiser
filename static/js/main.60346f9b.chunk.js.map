{"version":3,"sources":["helpers/Interfaces.ts","components/header/Header.tsx","helpers/Constants.js","helpers/CanvasFunctions.ts","helpers/WorldFunctions.ts","components/grid/Grid.tsx","helpers/PathfindingFunctions.ts","pages/Pathfinder.tsx","App.js","reportWebVitals.js","index.js"],"names":["CellType","Algorithm","Header","handleType","type","algorithm","handleAlgorithm","handlePathfind","Container","maxWidth","container","spacing","alignItems","xs","item","ToggleButtonGroup","size","value","exclusive","onChange","event","newType","ToggleButton","Start","Checkpoint","Goal","Wall","Empty","FormControl","style","minWidth","InputLabel","Select","target","label","MenuItem","AStar","Dijkstra","BFS","DFS","Random","Button","onClick","variant","color","CELL_SIZE","NUM_COLS","Math","floor","WIDTH","NUM_ROWS","HEIGHT","drawLine","context","x1","y1","x2","y2","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","drawCell","cell","fillStyle","Visited","rect","x","y","fill","cloneDeep","require","getTypeOfCell","grid","key","getGoalCell","getStartCell","getNextWorld","world","steps","clonedWorld","i","length","step","getAdjacent","parseKey","adjacent","push","split","map","Number","isDrawing","getCursorPosition","canvas","getBoundingClientRect","scaleX","width","scaleY","height","clientX","left","clientY","top","Grid","props","useState","setContext","handleWorld","canvasRef","useRef","useEffect","current","handleMouseMove","e","coords","getNearestCell","currentGoal","currentStart","handleMouseDown","handleMouseUp","addEventListener","removeEventListener","getContext","className","ref","bfs","queue","explored","start","shift","console","log","adj","includes","dfs","stack","pop","astar","dijkstra","random","pathfind","algo","theme","createTheme","palette","typography","h3","fontFamily","paddingBottom","Pathfinder","setType","setWorld","setAlgorithm","timeout","ms","Promise","resolve","setTimeout","setNextWorld","w","a","nextWorld","splice","newWorld","GridProps","HeaderProps","newAlgo","k","resetWorld","makeStyles","root","background","border","borderRadius","padding","marginBottom","useStyles","ThemeProvider","Typography","zIndex","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60346f9b.chunk.js","sourcesContent":["export enum CellType {\r\n  Empty,\r\n  Goal,\r\n  Start,\r\n  Wall,\r\n  Checkpoint,\r\n  Visited\r\n}\r\n\r\nexport enum Algorithm {\r\n  AStar,\r\n  Dijkstra,\r\n  DFS,\r\n  BFS,\r\n  Random\r\n}\r\n\r\nexport interface GridCell{\r\n  type: CellType,\r\n  readonly x: number,\r\n  readonly y: number\r\n}\r\n\r\nexport interface PathfindingStep{\r\n  key: string,\r\n  newType: CellType\r\n}","import React from 'react'\r\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab'\r\nimport { Grid, Container, Button, FormControl, InputLabel, MenuItem, Select } from '@material-ui/core';\r\nimport { Algorithm, CellType } from '../../helpers/Interfaces';\r\n\r\ninterface HeaderProps {\r\n  type: CellType;\r\n  handleType: (type: CellType) => void;\r\n  algorithm: Algorithm;\r\n  handleAlgorithm: (algorithm: Algorithm) => void;\r\n  handlePathfind: () => void;\r\n}\r\n\r\nconst Header = ({ handleType, type, algorithm, handleAlgorithm, handlePathfind }: React.PropsWithChildren<HeaderProps>) => {\r\n  \r\n  const handleTypeChange = (event: any, newType: CellType) => {\r\n    handleType(newType)\r\n  }\r\n\r\n  const handleAlgoChange = (event: React.ChangeEvent<{value: unknown }>) => {\r\n    handleAlgorithm(event.target.value as Algorithm)\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n    <Grid container spacing={3} alignItems=\"flex-end\" >\r\n      <Grid xs={4} item>\r\n        <ToggleButtonGroup size=\"small\" value={type} exclusive onChange={handleTypeChange}>\r\n            <ToggleButton value={CellType.Start}>Start</ToggleButton>\r\n            <ToggleButton value={CellType.Checkpoint}>Checkpoint</ToggleButton>\r\n          <ToggleButton value={CellType.Goal}>Goal</ToggleButton>\r\n          <ToggleButton value={CellType.Wall}>Wall</ToggleButton>\r\n          <ToggleButton value={CellType.Empty}>Erase</ToggleButton>\r\n        </ToggleButtonGroup>\r\n      </Grid>\r\n\r\n      <Grid xs={4} item>\r\n        <FormControl style={{minWidth: '120px'}}>\r\n          <InputLabel>Algorithm</InputLabel>\r\n          <Select\r\n            \r\n            value={algorithm}\r\n            onChange={handleAlgoChange}\r\n            label=\"Algorithm\"\r\n          >\r\n            <MenuItem value={Algorithm.AStar}>AStar</MenuItem>\r\n            <MenuItem value={Algorithm.Dijkstra}>Dijkstra</MenuItem>\r\n            <MenuItem value={Algorithm.BFS}>BFS</MenuItem>\r\n            <MenuItem value={Algorithm.DFS}>DFS</MenuItem>\r\n            <MenuItem value={Algorithm.Random}>Random</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      \r\n\r\n      <Grid xs={4} item>\r\n          <Button onClick={handlePathfind} variant=\"contained\" color=\"primary\">\r\n        PATHFIND\r\n        </Button>\r\n      </Grid>\r\n      \r\n      </Grid>\r\n      </Container>\r\n  )\r\n}\r\nexport default Header;","export const WIDTH = 1920;\r\nexport const HEIGHT = 1080;\r\nexport const CELL_SIZE = 60;\r\nexport const LINE_WIDTH = 2;\r\nexport const NUM_COLS = Math.floor(WIDTH / CELL_SIZE)\r\nexport const NUM_ROWS = Math.floor(HEIGHT / CELL_SIZE)\r\nexport const STEP_SIZE = 5;","import { GridCell, CellType } from \"./Interfaces\";\r\nimport { CELL_SIZE, LINE_WIDTH } from \"./Constants\";\r\n\r\nexport const drawLine = (context: CanvasRenderingContext2D, x1: number, y1: number, x2: number, y2: number) => {\r\n  context.strokeStyle = '#94167F';\r\n  context.lineWidth = LINE_WIDTH;\r\n  context.beginPath();\r\n  context.moveTo(x1, y1);\r\n  context.lineTo(x2, y2);\r\n  context.stroke();\r\n}\r\n\r\nexport const drawCell = (context: CanvasRenderingContext2D, cell: GridCell) => {\r\n  switch (cell.type) {\r\n    case CellType.Empty:\r\n      context.fillStyle = '#300350';\r\n      break;\r\n    case CellType.Visited:\r\n      context.fillStyle = '#DD517F';\r\n      break;\r\n    case CellType.Wall:\r\n      context.fillStyle = \"#5F97AA\";\r\n      break;\r\n    case CellType.Start: \r\n      context.fillStyle = \"#4C9C42\";\r\n      break;\r\n    case CellType.Checkpoint:\r\n      context.fillStyle = \"#0083FF  \";\r\n      break;\r\n    case CellType.Goal:\r\n      context.fillStyle = \"#FF0072\";\r\n      break;\r\n  }\r\n\r\n  context.beginPath();\r\n  context.rect(cell.x * CELL_SIZE, cell.y * CELL_SIZE, CELL_SIZE, CELL_SIZE)\r\n  context.fill();\r\n}","import { CELL_SIZE, NUM_COLS, NUM_ROWS } from \"./Constants\";\r\nimport { GridCell, CellType, PathfindingStep } from \"./Interfaces\";\r\n\r\nconst cloneDeep = require('lodash/cloneDeep')\r\n\r\n\r\nexport const getNearestCell = (coords: Array<number>): Array<number> => {\r\n  let [x, y] = [...coords];\r\n\r\n  x = Math.floor(x / CELL_SIZE)\r\n  y = Math.floor(y / CELL_SIZE)\r\n  return [x, y]\r\n}\r\n\r\nconst getTypeOfCell = (grid: {[key: string]: GridCell}, type: CellType): string => {\r\n  for (const key in grid) {\r\n    if (grid[key].type === type) {\r\n      return key;\r\n    }\r\n  }\r\n  return \"\";\r\n}\r\n\r\nexport const getGoalCell = (grid: {[key: string]: GridCell}): string => {\r\n  return getTypeOfCell(grid, CellType.Goal)\r\n}\r\nexport const getStartCell = (grid: {[key: string]: GridCell}): string => {\r\n  return getTypeOfCell(grid, CellType.Start)\r\n}\r\n\r\nexport const resetWorld = (world: { [key: string]: GridCell }): { [key: string]: GridCell } => {\r\n  let clonedWorld = cloneDeep(world)\r\n  for (let k in clonedWorld) {\r\n    if (clonedWorld[k].type === CellType.Visited) {\r\n      clonedWorld[k].type = CellType.Empty\r\n    }\r\n  }\r\n  return clonedWorld\r\n}\r\n\r\nexport const getNextWorld = (world: { [key: string]: GridCell }, steps: Array<PathfindingStep>):  { [key: string]: GridCell }=> {\r\n  let clonedWorld = cloneDeep(world)\r\n  for (let i = 0; i < steps.length; i++){\r\n    \r\n    const step = steps[i]\r\n    if (clonedWorld[step.key].type === CellType.Empty) {\r\n      clonedWorld[step.key].type = step.newType;\r\n    }\r\n  }\r\n  return clonedWorld\r\n}\r\n\r\nexport const getAdjacent = (key: string): Array<string> => {\r\n  const {x,y} = parseKey(key);\r\n  const adjacent = [];\r\n  if (y > 0) {\r\n    adjacent.push(`${x},${y-1}`)\r\n  }\r\n  if (x > 0) {\r\n    adjacent.push(`${x-1},${y}`)\r\n  }\r\n  if (x < NUM_COLS - 1) {\r\n    adjacent.push(`${x+1},${y}`)\r\n  }\r\n  if (y < NUM_ROWS - 1) {\r\n    adjacent.push(`${x},${y+1}`)\r\n  }\r\n  return adjacent\r\n}\r\n\r\nexport const parseKey = (key: string): { x: number, y: number } => {\r\n  const [x, y] = key.split(\",\").map(Number);\r\n  return {x,y}\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { CELL_SIZE, WIDTH, HEIGHT, NUM_COLS, NUM_ROWS} from '../../helpers/Constants'\r\nimport { drawLine, drawCell } from '../../helpers/CanvasFunctions'\r\nimport { CellType, GridCell } from '../../helpers/Interfaces';\r\nimport {getNearestCell, getGoalCell, getStartCell} from '../../helpers/WorldFunctions'\r\nimport './Grid.css'\r\n\r\nconst cloneDeep = require('lodash/cloneDeep')\r\n\r\ninterface GridProps{\r\n  type: CellType;\r\n  world: {[key:string]: GridCell}\r\n  handleWorld: (newWorld: {[key:string]: GridCell}) => void;\r\n}\r\n\r\nvar isDrawing = false;\r\n\r\n\r\nconst Grid = (props: GridProps) => {\r\n  const [context, setContext] = useState<CanvasRenderingContext2D | null>(null)\r\n  const { world, handleWorld } = {...props}\r\n\r\n  const canvasRef = useRef<HTMLCanvasElement>(null)\r\n\r\n\r\n  // Mounts and unmounts an event listener on the canvas every time world state is changed\r\n  // Seems like world state is store locally in the handleMouseDown function\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current\r\n\r\n    const handleMouseMove = (e: MouseEvent) => {\r\n      if (isDrawing === true) {\r\n        const canvas = canvasRef.current\r\n        let [x,y] = [...getNearestCell(getCursorPosition(canvas, e))];\r\n        let clonedWorld = cloneDeep(world)\r\n        if (props.type === CellType.Goal) {\r\n          let currentGoal = getGoalCell(clonedWorld);\r\n          if (currentGoal) {\r\n            clonedWorld[currentGoal].type = CellType.Empty;\r\n          }\r\n        }else if (props.type === CellType.Start) {\r\n          let currentStart = getStartCell(clonedWorld);\r\n          if (currentStart) {\r\n            clonedWorld[currentStart].type = CellType.Empty;\r\n          }\r\n        }\r\n        clonedWorld[`${x},${y}`].type = props.type; \r\n        handleWorld(clonedWorld);\r\n      }\r\n    }\r\n\r\n    const handleMouseDown = (e: MouseEvent) => {\r\n      isDrawing = true\r\n      handleMouseMove(e)\r\n    }\r\n    const handleMouseUp = (e: MouseEvent) => {\r\n      if (isDrawing) {\r\n        handleMouseMove(e)\r\n        isDrawing = false\r\n      }\r\n    }\r\n    const handleMouseLeave = (e: MouseEvent) => {\r\n      if (isDrawing) {\r\n        isDrawing = false\r\n      }\r\n    }\r\n\r\n    canvas.addEventListener(\"mousedown\", handleMouseDown)\r\n    canvas.addEventListener(\"mousemove\", handleMouseMove)\r\n    canvas.addEventListener(\"mouseup\", handleMouseUp)\r\n    canvas.addEventListener(\"mouseleave\", handleMouseLeave)\r\n    return () => {\r\n      canvas.removeEventListener(\"mousemove\", handleMouseMove)\r\n      canvas.removeEventListener(\"mousedown\", handleMouseDown)\r\n      canvas.removeEventListener(\"mouseup\", handleMouseUp)\r\n    }\r\n  }, [world, props.type])\r\n\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current\r\n\r\n    setContext(canvas.getContext('2d'));\r\n    if (context) {\r\n      context.canvas.width = WIDTH;\r\n      context.canvas.height = HEIGHT;\r\n      let width = context.canvas.width;\r\n      let height = context.canvas.height;\r\n      \r\n      // Draw cells\r\n      for (const key in world) {\r\n        drawCell(context, world[key])\r\n      }    \r\n\r\n      // Draw vertical grid lines\r\n      for (let i = 1; i < NUM_COLS; i++){\r\n        drawLine(context, i * CELL_SIZE, 0, i * CELL_SIZE, height)\r\n      }\r\n      // Draw horizontal grid lines\r\n      for (let i = 1; i < NUM_ROWS; i++){\r\n        drawLine(context, 0, i* CELL_SIZE, width, i * CELL_SIZE)\r\n      }\r\n    }\r\n  }, [world])\r\n\r\n  return (\r\n    <canvas className=\"Grid\" ref={canvasRef}/>\r\n  )\r\n}\r\n\r\nconst getCursorPosition = (canvas: HTMLCanvasElement, event: MouseEvent): Array<number> => {\r\n  const rect = canvas.getBoundingClientRect()\r\n\r\n  const scaleX = canvas.width / rect.width;    // relationship bitmap vs. element for X\r\n  const scaleY = canvas.height / rect.height;  // relationship bitmap vs. element for Y\r\n  const x = (event.clientX - rect.left) * scaleX;\r\n  const y = (event.clientY - rect.top) * scaleY;\r\n  return [x, y]\r\n}\r\n\r\n\r\nexport default Grid;\r\n\r\n","import { Algorithm, CellType, GridCell, PathfindingStep } from \"./Interfaces\";\r\nimport { getAdjacent, getGoalCell, getStartCell } from \"./WorldFunctions\";\r\n\r\nconst pathfind = (world: { [key: string]: GridCell }, algo: Algorithm): Array<PathfindingStep> => {\r\n\r\n  //If there is a goal and start\r\n  if (getStartCell(world) && getGoalCell(world)) {\r\n    switch (algo) {\r\n      case Algorithm.BFS:\r\n        return bfs(world)\r\n      case Algorithm.DFS:\r\n        return dfs(world)\r\n      case Algorithm.AStar:\r\n        return astar(world)\r\n      case Algorithm.Dijkstra:\r\n        return dijkstra(world)\r\n      case Algorithm.Random:\r\n        return random(world)\r\n      default:\r\n        return bfs(world)\r\n    }\r\n  }\r\n  return []\r\n}\r\n\r\n\r\nconst bfs = (world: { [key: string]: GridCell }): Array<PathfindingStep> => {\r\n  const steps: Array<PathfindingStep> = []\r\n  const queue: Array<string> = [];\r\n  const explored: Array<string> = [];\r\n  const start = getStartCell(world)\r\n  explored.push(start);\r\n  queue.push(start);\r\n  let current = \"\";\r\n  while (queue.length > 0) {\r\n\r\n    current = queue.shift();\r\n\r\n    if (world[current].type === CellType.Goal) {\r\n      console.log(\"found\")\r\n      break;\r\n    }\r\n    for (let adj of getAdjacent(current)) {\r\n      if (world[adj].type !== CellType.Wall) {\r\n        if (!explored.includes(adj)) {\r\n          explored.push(adj)\r\n          queue.push(adj)\r\n        }\r\n      }\r\n      \r\n    }\r\n    steps.push({key:current, newType: CellType.Visited})\r\n\r\n  }\r\n  return steps\r\n}\r\n\r\nconst dfs = (world: { [key: string]: GridCell }): Array<PathfindingStep> => {\r\n  const steps: Array<PathfindingStep> = [];\r\n  const stack: Array<string> = [];\r\n  const explored: Array<string> = []\r\n  const start = getStartCell(world)\r\n  stack.push(start)\r\n  let current = \"\"\r\n  while (stack.length > 0) {\r\n    current = stack.pop();\r\n    if (world[current].type === CellType.Goal) {\r\n      break;\r\n    }\r\n    if (!explored.includes(current)) {\r\n      explored.push(current)\r\n      for (let adj of getAdjacent(current)) {\r\n        if (world[adj].type !== CellType.Wall) {\r\n        stack.push(adj)\r\n          \r\n        }\r\n      }\r\n      steps.push({key:current, newType: CellType.Visited})\r\n\r\n    }\r\n\r\n  }\r\n\r\n  return steps;\r\n}\r\n\r\nconst astar = (world: { [key: string]: GridCell }): Array<PathfindingStep> => {\r\n  return []\r\n}\r\n\r\nconst dijkstra = (world: { [key: string]: GridCell }): Array<PathfindingStep> => {\r\n  return []\r\n}\r\n\r\nconst random = (world: { [key: string]: GridCell }): Array<PathfindingStep> => {\r\n  return []\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default pathfind;","import React, {useState, useEffect} from 'react'\r\nimport {createTheme, ThemeProvider, Typography,  makeStyles } from '@material-ui/core';\r\n\r\nimport Header from '../components/header/Header'\r\nimport Grid from '../components/grid/Grid'\r\n\r\nimport {Algorithm, CellType, GridCell, PathfindingStep } from '../helpers/Interfaces';\r\nimport { NUM_COLS, NUM_ROWS, STEP_SIZE } from '../helpers/Constants';\r\nimport pathfind from '../helpers/PathfindingFunctions';\r\nimport { getNextWorld, resetWorld } from '../helpers/WorldFunctions';\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    type: 'dark'\r\n  },\r\n  typography: {\r\n    h3: {\r\n      fontFamily: 'Consolas',\r\n      color: '#FFF',\r\n      paddingBottom: '20px',\r\n    },\r\n  }\r\n});\r\n\r\nconst Pathfinder = (): JSX.Element => {\r\n\r\n  const [type, setType] = useState(CellType.Start);\r\n  const [world, setWorld] = useState({});\r\n  const [algorithm, setAlgorithm] = useState(Algorithm.BFS)\r\n\r\n  // Initializes world on mount\r\n  // Scuffed map storing x,y as a string since storing array[x,y] can only be gotten by reference\r\n  // Has better performance than using a 2d array due to faster deep copy.\r\n  useEffect(() => {\r\n    \r\n    let map: { [key: string]: GridCell } = {}\r\n    for (let x = 0; x < NUM_COLS; x++){\r\n      for (let y = 0; y < NUM_ROWS; y++){\r\n        map[`${x},${y}`] =  {type: CellType.Empty, x: x, y: y}\r\n      }\r\n    }\r\n\r\n    // Set random start and end positions.\r\n    let x1 = Math.floor(Math.random() * NUM_COLS);\r\n    let y1 = Math.floor(Math.random() * NUM_ROWS);\r\n    let x2 = Math.floor(Math.random() * NUM_COLS);\r\n    let y2 = Math.floor(Math.random() * NUM_ROWS);\r\n\r\n    map[`${x1},${y1}`].type = CellType.Start;\r\n    map[`${x2},${y2}`].type = CellType.Goal;\r\n    \r\n\r\n    handleWorld(map)\r\n\r\n  }, [])\r\n\r\n  const handlePathfind = () => {\r\n    const newWorld = resetWorld(world)\r\n    setWorld(newWorld)\r\n    const steps = pathfind(newWorld, algorithm);\r\n    // Remove start position\r\n    steps.shift()\r\n    \r\n    setNextWorld(steps, newWorld)\r\n    \r\n  }\r\n\r\n  const timeout = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n  const setNextWorld = async (steps: Array<PathfindingStep>, w: any) => {\r\n    if (steps.length > 0) {\r\n      await timeout(50);\r\n      let nextWorld = getNextWorld(w, steps.splice(0, STEP_SIZE))\r\n      setWorld(nextWorld)\r\n      setNextWorld(steps, nextWorld)\r\n      \r\n    }\r\n    return;\r\n  }\r\n\r\n\r\n  const handleType = (newType: CellType) => {\r\n    setType(newType)\r\n  }\r\n\r\n  const handleAlgorithm = (newAlgo: Algorithm) => {\r\n    setAlgorithm(newAlgo)\r\n  }\r\n\r\n  const handleWorld = (newWorld: {[key:string]: GridCell}) => {\r\n    setWorld(newWorld);\r\n  }\r\n\r\n  const GridProps = {\r\n    type: type,\r\n    handleWorld: handleWorld,\r\n    world: world\r\n  }\r\n\r\n  const HeaderProps = {\r\n    type: type,\r\n    handleType: handleType,\r\n    algorithm: algorithm,\r\n    handleAlgorithm: handleAlgorithm,\r\n    handlePathfind: handlePathfind\r\n  }\r\n\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      background: '#303030',\r\n      border: 0,\r\n      borderRadius: 3,\r\n      color: 'white',\r\n      height: 48,\r\n      padding: '15px 30px',\r\n      marginBottom: '20px'\r\n    },\r\n  });\r\n  \r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <ThemeProvider theme={theme}>\r\n          <Typography variant=\"h3\">Interactive Pathfinder</Typography>\r\n      <div style={{ zIndex: 100 }}>\r\n        \r\n          <Header {...HeaderProps}></Header>\r\n        \r\n        <Grid {...GridProps}></Grid>\r\n      </div>\r\n      <div className=\"overlay\"></div>\r\n      <div className=\"overlay glitch\"></div>\r\n      </ThemeProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pathfinder;","import './App.css';\n\nimport Pathfinder from './pages/Pathfinder';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pathfinder/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}