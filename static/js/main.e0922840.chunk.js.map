{"version":3,"sources":["helpers/Interfaces.ts","components/header/Header.tsx","helpers/Constants.js","helpers/CanvasFunctions.ts","components/grid/Grid.tsx","pages/Pathfinder.tsx","App.js","reportWebVitals.js","index.js"],"names":["CellType","Algorithm","Header","handleType","type","algorithm","handleAlgorithm","Container","maxWidth","container","spacing","alignItems","xs","item","ToggleButtonGroup","size","value","exclusive","onChange","event","newType","ToggleButton","Start","Checkpoint","Goal","Wall","Empty","FormControl","style","minWidth","InputLabel","Select","target","label","MenuItem","AStar","Dijkstra","BFS","DFS","Random","Button","variant","color","CELL_SIZE","drawLine","context","x1","y1","x2","y2","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","drawCell","cell","fillStyle","Visited","rect","x","y","fill","_","require","getCursorPosition","canvas","getBoundingClientRect","scaleX","width","scaleY","height","clientX","left","clientY","top","getNearestCell","coords","Math","floor","getTypeOfCell","grid","key","getGoalCell","getStartCell","Grid","props","NUM_COLS","WIDTH","NUM_ROWS","HEIGHT","useState","setContext","world","handleWorld","canvasRef","useRef","useEffect","map","random","current","handleMouseDown","e","clonedWorld","cloneDeep","currentGoal","currentStart","addEventListener","removeEventListener","getContext","i","className","ref","theme","createTheme","palette","typography","h3","fontFamily","paddingBottom","Pathfinder","setType","setWorld","setAlgorithm","GridProps","newWorld","HeaderProps","newAlgo","makeStyles","root","background","border","borderRadius","padding","marginBottom","useStyles","ThemeProvider","Typography","zIndex","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0922840.chunk.js","sourcesContent":["export enum CellType {\r\n  Empty,\r\n  Goal,\r\n  Start,\r\n  Wall,\r\n  Checkpoint,\r\n  Visited\r\n}\r\n\r\nexport enum Algorithm {\r\n  AStar,\r\n  Dijkstra,\r\n  DFS,\r\n  BFS,\r\n  Random\r\n}\r\n\r\nexport interface GridCell{\r\n  type: CellType,\r\n  readonly x: number,\r\n  readonly y: number\r\n}","import React from 'react'\r\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab'\r\nimport { Grid, Container, Button, FormControl, InputLabel, MenuItem, Select } from '@material-ui/core';\r\nimport { Algorithm, CellType } from '../../helpers/Interfaces';\r\n\r\ninterface HeaderProps {\r\n  type: CellType;\r\n  handleType: (type: CellType) => void;\r\n  algorithm: Algorithm;\r\n  handleAlgorithm: (algorithm: Algorithm) => void;\r\n\r\n}\r\n\r\nconst Header = ({ handleType, type, algorithm, handleAlgorithm }: React.PropsWithChildren<HeaderProps>) => {\r\n  \r\n  const handleTypeChange = (event: any, newType: CellType) => {\r\n    handleType(newType)\r\n  }\r\n\r\n  const handleAlgoChange = (event: React.ChangeEvent<{value: unknown }>) => {\r\n    handleAlgorithm(event.target.value as Algorithm)\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n    <Grid container spacing={3} alignItems=\"flex-end\" >\r\n      <Grid xs={4} item>\r\n        <ToggleButtonGroup size=\"small\" value={type} exclusive onChange={handleTypeChange}>\r\n            <ToggleButton value={CellType.Start}>Start</ToggleButton>\r\n            <ToggleButton value={CellType.Checkpoint}>Checkpoint</ToggleButton>\r\n          <ToggleButton value={CellType.Goal}>Goal</ToggleButton>\r\n          <ToggleButton value={CellType.Wall}>Wall</ToggleButton>\r\n          <ToggleButton value={CellType.Empty}>Erase</ToggleButton>\r\n        </ToggleButtonGroup>\r\n      </Grid>\r\n\r\n      <Grid xs={4} item>\r\n        <FormControl style={{minWidth: '120px'}}>\r\n          <InputLabel>Algorithm</InputLabel>\r\n          <Select\r\n            \r\n            value={algorithm}\r\n            onChange={handleAlgoChange}\r\n            label=\"Algorithm\"\r\n          >\r\n            <MenuItem value={Algorithm.AStar}>AStar</MenuItem>\r\n            <MenuItem value={Algorithm.Dijkstra}>Dijkstra</MenuItem>\r\n            <MenuItem value={Algorithm.BFS}>BFS</MenuItem>\r\n            <MenuItem value={Algorithm.DFS}>DFS</MenuItem>\r\n            <MenuItem value={Algorithm.Random}>Random</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      \r\n\r\n      <Grid xs={4} item>\r\n        <Button variant=\"contained\" color=\"primary\">\r\n        PATHFIND\r\n        </Button>\r\n      </Grid>\r\n      \r\n      </Grid>\r\n      </Container>\r\n  )\r\n}\r\nexport default Header;","export const WIDTH = 1920;\r\nexport const HEIGHT = 1080;\r\nexport const CELL_SIZE = 60;\r\nexport const LINE_WIDTH = 2;","import { GridCell, CellType } from \"./Interfaces\";\r\nimport { CELL_SIZE, LINE_WIDTH } from \"./Constants\";\r\n\r\nexport const drawLine = (context: CanvasRenderingContext2D, x1: number, y1: number, x2: number, y2: number) => {\r\n  context.strokeStyle = '#94167F';\r\n  context.lineWidth = LINE_WIDTH;\r\n  context.beginPath();\r\n  context.moveTo(x1, y1);\r\n  context.lineTo(x2, y2);\r\n  context.stroke();\r\n}\r\n\r\nexport const drawCell = (context: CanvasRenderingContext2D, cell: GridCell) => {\r\n  switch (cell.type) {\r\n    case CellType.Empty:\r\n      context.fillStyle = '#300350';\r\n      break;\r\n    case CellType.Visited:\r\n      context.fillStyle = '#DD517F';\r\n      break;\r\n    case CellType.Wall:\r\n      context.fillStyle = \"#5F97AA\";\r\n      break;\r\n    case CellType.Start: \r\n      context.fillStyle = \"#4C9C42\";\r\n      break;\r\n    case CellType.Checkpoint:\r\n      context.fillStyle = \"#0083FF  \";\r\n      break;\r\n    case CellType.Goal:\r\n      context.fillStyle = \"#FF0072\";\r\n      break;\r\n  }\r\n\r\n  context.beginPath();\r\n  context.rect(cell.x * CELL_SIZE, cell.y * CELL_SIZE, CELL_SIZE, CELL_SIZE)\r\n  context.fill();\r\n}","import React, { useState, useEffect, useRef } from 'react';\r\nimport { CELL_SIZE, WIDTH, HEIGHT} from '../../helpers/Constants'\r\nimport { drawLine, drawCell } from '../../helpers/CanvasFunctions'\r\nimport { CellType, GridCell } from '../../helpers/Interfaces';\r\nimport './Grid.css'\r\n\r\nvar _ = require('lodash') \r\n\r\n\r\ninterface GridProps{\r\n  type: CellType;\r\n  world: {[key:string]: GridCell}\r\n  handleWorld: (newWorld: {[key:string]: GridCell}) => void;\r\n}\r\n\r\nconst Grid = (props: GridProps) => {\r\n\r\n  const NUM_COLS = Math.floor(WIDTH / CELL_SIZE)\r\n  const NUM_ROWS = Math.floor(HEIGHT / CELL_SIZE)\r\n\r\n  const [context, setContext] = useState<CanvasRenderingContext2D | null>(null)\r\n  const { world, handleWorld } = {...props}\r\n\r\n  const canvasRef = useRef<HTMLCanvasElement>(null)\r\n  \r\n  \r\n\r\n  // Initializes world on mount\r\n  // Scuffed map storing x,y as a string since storing array[x,y] can only be gotten by reference\r\n  // Has better performance than using a 2d array due to faster deep copy.\r\n  useEffect(() => {\r\n    \r\n    let map: { [key: string]: GridCell } = {}\r\n    for (let x = 0; x < NUM_COLS; x++){\r\n      for (let y = 0; y < NUM_ROWS; y++){\r\n        map[`${x},${y}`] =  {type: CellType.Empty, x: x, y: y}\r\n      }\r\n    }\r\n\r\n    // Set random start and end positions.\r\n    let x1 = Math.floor(Math.random() * NUM_COLS);\r\n    let y1 = Math.floor(Math.random() * NUM_ROWS);\r\n    let x2 = Math.floor(Math.random() * NUM_COLS);\r\n    let y2 = Math.floor(Math.random() * NUM_ROWS);\r\n\r\n    map[`${x1},${y1}`].type = CellType.Start;\r\n    map[`${x2},${y2}`].type = CellType.Goal;\r\n    \r\n\r\n    handleWorld(map)\r\n\r\n  }, [])\r\n\r\n  // Mounts and unmounts an event listener on the canvas every time world state is changed\r\n  // Seems like world state is store locally in the handleMouseDown function\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current\r\n    function handleMouseDown (e: MouseEvent) {\r\n      const canvas = canvasRef.current\r\n      let [x,y] = [...getNearestCell(getCursorPosition(canvas, e))];\r\n      let clonedWorld = _.cloneDeep(world)\r\n      if (props.type === CellType.Goal) {\r\n        let currentGoal = getGoalCell(clonedWorld);\r\n        if (currentGoal) {\r\n          clonedWorld[currentGoal].type = CellType.Empty;\r\n        }\r\n      }else if (props.type === CellType.Start) {\r\n        let currentStart = getStartCell(clonedWorld);\r\n        if (currentStart) {\r\n          clonedWorld[currentStart].type = CellType.Empty;\r\n        }\r\n      }\r\n      \r\n      clonedWorld[`${x},${y}`].type = props.type; \r\n      handleWorld(clonedWorld);\r\n    }\r\n    canvas.addEventListener(\"mousemove\", handleMouseDown)\r\n    return () => {\r\n      canvas.removeEventListener(\"mousemove\", handleMouseDown)\r\n    }\r\n  }, [world])\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current\r\n\r\n    setContext(canvas.getContext('2d'));\r\n    if (context) {\r\n      context.canvas.width = WIDTH;\r\n      context.canvas.height = HEIGHT;\r\n      let width = context.canvas.width;\r\n      let height = context.canvas.height;\r\n      \r\n      // Draw cells\r\n      for (const key in world) {\r\n        drawCell(context, world[key])\r\n      }    \r\n\r\n      // Draw vertical grid lines\r\n      for (let i = 1; i < NUM_COLS; i++){\r\n        drawLine(context, i * CELL_SIZE, 0, i * CELL_SIZE, height)\r\n      }\r\n      // Draw horizontal grid lines\r\n      for (let i = 1; i < NUM_ROWS; i++){\r\n        drawLine(context, 0, i* CELL_SIZE, width, i * CELL_SIZE)\r\n      }\r\n    }\r\n  }, [world])\r\n\r\n  return (\r\n    <canvas className=\"Grid\" ref={canvasRef}/>\r\n  )\r\n}\r\n\r\nconst getCursorPosition = (canvas: HTMLCanvasElement, event: MouseEvent): Array<number> => {\r\n  const rect = canvas.getBoundingClientRect()\r\n\r\n  const scaleX = canvas.width / rect.width;    // relationship bitmap vs. element for X\r\n  const scaleY = canvas.height / rect.height;  // relationship bitmap vs. element for Y\r\n  const x = (event.clientX - rect.left) * scaleX;\r\n  const y = (event.clientY - rect.top) * scaleY;\r\n  return [x, y]\r\n}\r\n\r\nconst getNearestCell = (coords: Array<number>): Array<number> => {\r\n  let [x, y] = [...coords];\r\n\r\n  x = Math.floor(x / CELL_SIZE)\r\n  y = Math.floor(y / CELL_SIZE)\r\n  return [x, y]\r\n}\r\n\r\nconst getTypeOfCell = (grid: {[key: string]: GridCell}, type: CellType): string | void => {\r\n  for (const key in grid) {\r\n    if (grid[key].type === type) {\r\n      return key;\r\n    }\r\n  }\r\n}\r\n\r\nconst getGoalCell = (grid: {[key: string]: GridCell}): string | void => {\r\n  return getTypeOfCell(grid, CellType.Goal)\r\n}\r\nconst getStartCell = (grid: {[key: string]: GridCell}): string | void => {\r\n  return getTypeOfCell(grid, CellType.Start)\r\n}\r\n\r\n\r\nexport default Grid;\r\n\r\n","import React, {useState} from 'react'\r\nimport {createTheme, ThemeProvider, Typography, Box, makeStyles, CssBaseline } from '@material-ui/core';\r\n\r\nimport Header from '../components/header/Header'\r\nimport Grid from '../components/grid/Grid'\r\n\r\nimport {Algorithm, CellType, GridCell } from '../helpers/Interfaces';\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    type: 'dark'\r\n  },\r\n  typography: {\r\n    h3: {\r\n      fontFamily: 'Consolas',\r\n      color: '#FFF',\r\n      paddingBottom: '20px',\r\n    },\r\n  }\r\n \r\n});\r\n\r\n\r\n\r\nconst Pathfinder = (): JSX.Element => {\r\n\r\n  const [type, setType] = useState(CellType.Start);\r\n  const [world, setWorld] = useState({});\r\n  const [algorithm, setAlgorithm] = useState(Algorithm.AStar)\r\n\r\n\r\n  const handleType = (newType: CellType) => {\r\n    setType(newType)\r\n  }\r\n\r\n  const handleAlgorithm = (newAlgo: Algorithm) => {\r\n    setAlgorithm(newAlgo)\r\n  }\r\n\r\n  const handleWorld = (newWorld: {[key:string]: GridCell}) => {\r\n    setWorld(newWorld);\r\n  }\r\n\r\n  const GridProps = {\r\n    type: type,\r\n    handleWorld: handleWorld,\r\n    world: world\r\n  }\r\n\r\n  const HeaderProps = {\r\n    type: type,\r\n    handleType: handleType,\r\n    algorithm: algorithm,\r\n    handleAlgorithm: handleAlgorithm\r\n  }\r\n\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      background: '#303030',\r\n      border: 0,\r\n      borderRadius: 3,\r\n      color: 'white',\r\n      height: 48,\r\n      padding: '15px 30px',\r\n      marginBottom: '20px'\r\n    },\r\n  });\r\n  \r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <ThemeProvider theme={theme}>\r\n          <Typography variant=\"h3\">Interactive Pathfinder</Typography>\r\n      <div style={{ zIndex: 100 }}>\r\n        \r\n          <Header {...HeaderProps}></Header>\r\n        \r\n        <Grid {...GridProps}></Grid>\r\n      </div>\r\n      <div className=\"overlay\"></div>\r\n      <div className=\"overlay glitch\"></div>\r\n      </ThemeProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pathfinder;","import './App.css';\n\nimport Pathfinder from './pages/Pathfinder';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pathfinder/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}